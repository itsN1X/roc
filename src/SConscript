import re

Import('env', 'lib_env', 'tool_env', 'test_env')

env.Append(CPPPATH=['#src/modules'])

for targetdir in env.RecursiveGlob('modules', 'target_*'):
    if targetdir.name in env['ROC_TARGETS']:
        env.Append(CPPPATH=['#src/%s' % targetdir])

modulelibs = []

for moduledir in env.GlobDirs('modules/*'):
    cenv = env.Clone()
    cenv.AppendVars(tool_env)
    cenv.Append(CPPDEFINES=('ROC_MODULE', moduledir.name))

    sources = env.Glob('%s/*.cpp' % moduledir)
    for targetdir in env.RecursiveGlob(moduledir, 'target_*'):
        if targetdir.name in env['ROC_TARGETS']:
            sources += env.RecursiveGlob(targetdir, '*.cpp')

    if not sources:
        continue

    target = cenv.StaticLibrary(moduledir.name, sources)
    env.Alias(moduledir.name, [target], env.Action(''))
    env.AlwaysBuild(moduledir.name)

    modulelibs += [moduledir.name]

env.Prepend(LIBS=modulelibs)
env.Prepend(LIBS=modulelibs)
env.Prepend(LIBS=modulelibs)

if not GetOption('disable_lib'):
    cenv = env.Clone()
    cenv.AppendVars(lib_env)
    cenv.Append(CPPDEFINES=('ROC_MODULE', 'roc_lib'))
    cenv.Append(CPPPATH=['lib'])

    sources = env.Glob('lib/roc/*.cpp')
    lib = cenv.SharedLibrary('roc', sources)
    env.Depends(lib, '#src/lib/roc.version')

    target = env.Install(env['ROC_BINDIR'], lib)

    env.Alias('libroc', [target], env.Action(''))
    env.AlwaysBuild('libroc')

if not GetOption('disable_tests'):
    cenv = env.Clone()
    cenv.AppendVars(tool_env)
    cenv.AppendVars(test_env)
    cenv.Append(CPPDEFINES=('ROC_MODULE', 'roc_test'))

    test_main = cenv.Object('tests/test_main.cpp')

    for testdir in env.GlobDirs('tests/*'):
        ccenv = cenv.Clone()
        ccenv.Append(CPPPATH=['#src/%s' % testdir])

        if testdir.name == 'roc_lib':
            ccenv.Append(CPPPATH=['#src/lib'])
            ccenv.Prepend(LIBS=['roc'])

        sources = env.Glob('%s/*.cpp' % testdir)
        for targetdir in env.RecursiveGlob(testdir, 'target_*'):
            if targetdir.name in env['ROC_TARGETS']:
                ccenv.Append(CPPPATH=['#src/%s' % targetdir])
                sources += env.RecursiveGlob(targetdir, '*.cpp')

        exename = 'roc-test-' + re.sub('roc_', '', testdir.name)
        target = env.Install(env['ROC_BINDIR'],
            ccenv.Program(exename, sources + test_main,
                RPATH=env.Literal('\\$$ORIGIN')))

        env.AddTest(testdir.name, '%s/%s' % (env['ROC_BINDIR'], exename))

if not GetOption('disable_tools'):
    for tooldir in env.GlobDirs('tools/*'):
        cenv = env.Clone()
        cenv.AppendVars(tool_env)
        cenv.Append(CPPDEFINES=('ROC_MODULE', tooldir.name))
        cenv.Append(CPPPATH=['tools', '#src/tools/%s' % tooldir.name])

        sources = env.Glob('%s/*.cpp' % tooldir)
        objects = []
        for ggo in env.Glob('%s/*.ggo' % tooldir):
            objects += env.GenGetOpt(ggo, env['ROC_VERSION'])

        exename = re.sub('roc_', 'roc-', tooldir.name)
        target = env.Install(env['ROC_BINDIR'],
                    cenv.Program(exename, sources+objects))

        env.Alias(exename, [target], env.Action(''))
        env.AlwaysBuild(exename)
