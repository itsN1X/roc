Import('env')

import re

env.Append(CPPPATH=['#src/modules'])

for targetdir in env.RecursiveGlob('modules', 'target_*'):
    if targetdir.name in env['ROC_TARGETS']:
        env.Append(CPPPATH=['#src/%s' % targetdir])

modulelibs = []

for moduledir in env.GlobDirs('modules/*'):
    defines = env['CPPDEFINES'] + [('ROC_MODULE', moduledir.name)]

    sources = env.Glob('%s/*.cpp' % moduledir)
    for targetdir in env.RecursiveGlob(moduledir, 'target_*'):
        if targetdir.name in env['ROC_TARGETS']:
            sources += env.RecursiveGlob(targetdir, '*.cpp')

    if not sources:
        continue

    module = env.StaticLibrary(moduledir.name, sources, CPPDEFINES=defines)
    env.Alias(moduledir.name, [module], env.Action(''))
    env.AlwaysBuild(moduledir.name)

    modulelibs.append(moduledir.name)

env.Prepend(LIBS=modulelibs)
env.Prepend(LIBS=modulelibs)

if not GetOption('disable_lib'):
    defines = env['CPPDEFINES'] + [('ROC_MODULE', 'roc_lib')]
    cpppath = env['CPPPATH'] + ['lib']
    sources = env.Glob('lib/roc/*.cpp')

    lib = env.Install(env['ROC_BINDIR'],
            env.SharedLibrary('roc', sources,
                CPPDEFINES=defines, CPPPATH=cpppath))

    env.Alias('libroc', [lib], env.Action(''))
    env.AlwaysBuild('libroc')

if not GetOption('disable_tests'):
    test_defines = env['TEST_CPPDEFINES'] + env['CPPDEFINES']
    test_cxxflags = env['TEST_CXXFLAGS'] + env['CXXFLAGS']
    test_cpppath = env['TEST_CPPPATH'] + env['CPPPATH']
    test_libpath = env['TEST_LIBPATH'] + env['LIBPATH']
    test_libs = env['TEST_LIBS'] + env['LIBS']

    test_main = env.Object('tests/test_main.cpp',
                CXXFLAGS=test_cxxflags, CPPPATH=test_cpppath)

    for testdir in env.GlobDirs('tests/*'):
        cpppath = test_cpppath + ['#src/%s' % testdir]
        defines = test_defines + [('ROC_MODULE', '%s_test' % testdir.name)]

        libs = test_libs[:]
        if testdir.name == 'roc_lib':
            cpppath += ['#src/lib']
            libs += ['roc']

        sources = env.Glob('%s/*.cpp' % testdir)
        for targetdir in env.RecursiveGlob(testdir, 'target_*'):
            if targetdir.name in env['ROC_TARGETS']:
                sources += env.RecursiveGlob(targetdir, '*.cpp')
                cpppath += ['#src/%s' % targetdir]

        exename = 'roc-test-' + re.sub('roc_', '', testdir.name)
        env.Install(env['ROC_BINDIR'],
            env.Program(exename, sources + test_main,
                CXXFLAGS=test_cxxflags,
                CPPPATH=cpppath,
                CPPDEFINES=defines,
                LIBPATH=test_libpath,
                LIBS=libs,
                RPATH=env.Literal('\\$$ORIGIN')))

        env.AddTest(testdir.name, '%s/%s' % (env['ROC_BINDIR'], exename))

if not GetOption('disable_tools'):
    for tooldir in env.GlobDirs('tools/*'):
        defines = env['CPPDEFINES'] + [('ROC_MODULE', tooldir.name)]
        cpppath = env['CPPPATH'] + ['tools', '#src/tools/%s' % tooldir.name]

        sources = env.Glob('%s/*.cpp' % tooldir)
        for ggo in env.Glob('%s/*.ggo' % tooldir):
            sources += env.GenGetOpt(ggo, env['ROC_VERSION'])

        exename = re.sub('roc_', 'roc-', tooldir.name)
        exe = env.Install(env['ROC_BINDIR'],
                    env.Program(exename, sources,
                        CPPDEFINES=defines, CPPPATH=cpppath))

        env.Alias(exename, [exe], env.Action(''))
        env.AlwaysBuild(exename)
